package auth

import (
	"context"

	"golang.org/x/oauth2"
	"gopkg.in/headzoo/surf.v1"
)

const (
	// StandaloneRedirectURL for Standalone applications
	StandaloneRedirectURL = "urn:ietf:wg:oauth:2.0:oob"

	signinURL     = "/users/sign_in"
	signinForm    = "form.new_user"
	loginField    = "user[nickname]"
	passwordField = "user[password]"

	authAgreeForm = "form.authorize"
	authCodeField = "#authorization_code"
)

// ByLogin gets token by Shikimori login + password
func ByLogin(conf *oauth2.Config, login, password string) (*oauth2.Token, error) {
	ctx := context.Background()
	url := conf.AuthCodeURL("")

	bow := surf.NewBrowser()
	err := bow.Open(url)
	if err != nil {
		return nil, err
	}

	// if need to login
	if bow.Url().RequestURI() == signinURL {
		form, err := bow.Form(signinForm)
		if err != nil {
			return nil, err
		}

		form.Input(loginField, login)
		form.Input(passwordField, password)
		if err = form.Submit(); err != nil {
			return nil, err
		}

		err = bow.Open(url)
		if err != nil {
			return nil, err
		}
	}

	// if need click to "Agree"
	agreeForm, _ := bow.Form(authAgreeForm)
	if agreeForm != nil {
		agreeForm.Submit()
	}

	code := bow.Find(authCodeField).Text()
	tok, err := GetToken(ctx, conf, code)

	return tok, nil
}
